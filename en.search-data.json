{"/Blog-XSS_Todo/about/":{"data":{"":"This is the about page."},"title":"About"},"/Blog-XSS_Todo/blog/my-first-post/":{"data":{"":"","#":"Hey folks! ðŸ‘‹ In this post, Iâ€™ll walk you through how I built a simple to-do list app using just plain JavaScript â€” no frameworks, no dependencies, just vanilla JS. Iâ€™ll also touch on how I made it safe from common security threats like XSS (Cross-Site Scripting).\nLetâ€™s dive in!\nThe Goal I wanted to create a To-do list where:\nUsers can enter the tasks and click enter to add it. Clicking on tasks reveals extra options like setting due dates and adding notes . Users can even delete the tasks. Key Concepts The app covers:\nDOM manipulation Event handling Dynamic rendering Input validation XSS protection via HTML escaping Let give quick intro on this concepts.\n1.DOM manipulation: DOM(Document Object Model) Manipulation refers to changing HTML or content of web page using Javascript.You can add,remove or modify elements dynamically after page loaded.\n2. Event handling: Event handling means listening for actions like clicks,typing and form submissions, and then responding to them with code.\n3. Dynamic rendering: Dynamic rendering means updating parts of the web page automatically as the user interacts, without reloading the page.\n4. Input validation: Input validation checks if user input is correct before processing it â€” like making sure a name field isnâ€™t empty or an email is formatted properly.\n5. XSS Protection via HTML escaping: Cross-Site Scripting (XSS) is when attackers inject malicious JavaScript into your site. To prevent this, you escape special characters in user input before adding it to the DOM.\nThe HTML Structure I use two main elements in DOM:\n\u003cinput id=\"taskInput\" type=\"text\" placeholder=\"Add a task...\" /\u003e \u003cul id=\"taskList\"\u003e\u003c/ul\u003e taskInput is the textfield, and the taskList is where tasks get listed.\nCode: before using escapeHtml\nconst taskInput = document.getElementById(\"taskInput\"); const taskList = document.getElementById(\"taskList\"); // stores todos here const todos = []; function render(todos, taskList) { taskList.innerHTML = \"\"; todos.forEach((task) =\u003e { const li = document.createElement(\"li\"); li.innerHTML = ` \u003cdiv class=\"task-header\"\u003e \u003clabel\u003e \u003cinput type=\"checkbox\"\u003e \u003cspan\u003e${task.text}\u003c/span\u003e \u003c/label\u003e \u003c/div\u003e \u003cdiv class=\"task-details\" style=\"display: none;\"\u003e \u003cdiv class=\"task-meta\"\u003e Added on: ${new Date().toLocaleDateString()} \u003cbr /\u003e \u003clabel\u003eDue-Date\u003c/label\u003e \u003cinput id = \"due-date\" type=\"date\"\u003e \u003clabel\u003enotes\u003c/label\u003e \u003ctextarea id=\"notesInput\" placeholder=\"Add notes...\"\u003e\u003c/textarea\u003e\u003cbr\u003e \u003c/div\u003e \u003cbutton class=\"btn-delete\" data-id=\"${task.id}\"\u003eDelete\u003c/button\u003e \u003c/div\u003e `; li.addEventListener(\"click\", () =\u003e { const details = li.querySelector(\".task-details\"); details.style.display = \"block\"; }); li.addEventListener(\"dblclick\", () =\u003e { const details = li.querySelector(\".task-details\"); details.style.display = \"none\"; }); taskList.appendChild(li); }); } function addTask(taskInput, todos, taskList) { const taskText = taskInput.value.trim(); if (taskText == \"\") { alert(\"Please enter the task\"); return; } const newTask = { id: todos.length + 1, text: taskText, }; todos.push(newTask); // add to array render(todos, taskList); //render updated list taskInput.value = \"\"; } document.addEventListener(\"DOMContentLoaded\", () =\u003e { //Enter key taskInput.addEventListener(\"keydown\", (e) =\u003e { if (e.key === \"Enter\") { addTask(taskInput, todos, taskList); } }); }); Here, it is open to the vulnerabilities. when the code:\n\u003ca href=\"www.spam.com\"\u003eclickforamazonvoucher\u003c/a\u003e This prints code link in task-box.So users are easily open to XSS attack. So to nuetralize these attacks we are using escapeHTML.Where browser displays scripts in text format.\nHandling XSS with escapeHTML() Dangerous Input\n\u003ca href=\"www.spam.com\"\u003eclickamazonvoucher\u003c/a\u003e Escaping it\nfunction escapeHTML(str) { return str.replace(/[\u0026\u003c\u003e\"']/g, function (match) { const escapeChars = { \"\u0026\": \"\u0026amp;\", \"\u003c\": \"\u0026lt;\", \"\u003e\": \"\u0026gt;\", '\"': \"\u0026quot;\", \"'\": \"\u0026#039;\", }; return escapeChars[match]; }); } This is custom HTML sanitizer that prevents script injection.It escapes all the dangerous characters. So the browser shows text instead of executing a script.\nnow, using use escapeHTML(str) in task-header.\n\u003cdiv class=\"task-header\"\u003e \u003clabel\u003e \u003cinput type=\"checkbox\"\u003e \u003cspan\u003e${escapeHTML(task.text)}\u003c/span\u003e \u003c/label\u003e \u003c/div\u003e Adding Tasks When the user presses Enter, this function is triggered:\nfunction addTask(taskInput, todos, taskList) { const taskText = taskInput.value.trim(); if (taskText == \"\") { alert(\"Please enter the task\"); return; } const newTask = { id: todos.length + 1, text: taskText, }; todos.push(newTask); render(todos, taskList); taskInput.value = \"\"; } Rendering Tasks Hereâ€™s the core of the UI:\nfunction render(todos, taskList) { taskList.innerHTML = \"\"; todos.forEach((task) =\u003e { const li = document.createElement(\"li\"); li.innerHTML = ` \u003cdiv class=\"task-header\"\u003e \u003clabel\u003e \u003cinput type=\"checkbox\"\u003e \u003cspan\u003e${escapeHTML(task.text)}\u003c/span\u003e \u003c/label\u003e \u003c/div\u003e \u003cdiv class=\"task-details\" style=\"display: none;\"\u003e \u003cdiv class=\"task-meta\"\u003e Added on: ${new Date().toLocaleDateString()} \u003cbr /\u003e \u003clabel\u003eDue-Date\u003c/label\u003e \u003cinput id=\"due-date\" type=\"date\"\u003e \u003clabel\u003enotes\u003c/label\u003e \u003ctextarea id=\"notesInput\" placeholder=\"Add notes...\"\u003e\u003c/textarea\u003e\u003cbr\u003e \u003c/div\u003e \u003cbutton class=\"btn-delete\" data-id=\"${task.id}\"\u003eDelete\u003c/button\u003e \u003c/div\u003e `; li.addEventListener(\"click\", () =\u003e { const details = li.querySelector(\".task-details\"); details.style.display = \"block\"; }); li.addEventListener(\"dblclick\", () =\u003e { const details = li.querySelector(\".task-details\"); details.style.display = \"none\"; }); taskList.appendChild(li); }); } This builds out each task, includes a checkbox, due date field, notes input, and a delete button. I also added a fun interaction â€” click to open, double-click to close the details section!\nWrapping Up Hereâ€™s what I learned while building this:\nAlways sanitize user input! DOM manipulation is powerful when done cleanly. Vanilla JavaScript is more than enough for small, effective apps. Thanks for reading! Letâ€™s keep building â€” securely!\n-MrDruv"},"title":"How I Built a Secure To-Do App with XSS Protection"},"/Blog-XSS_Todo/docs/":{"data":{"":"This is a demo of the themeâ€™s documentation layout.","hello-world#Hello, World!":" main.gopackage main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } "},"title":"Documentation"},"/Blog-XSS_Todo/docs/first-page/":{"data":{"":"A simple demo page."},"title":"Demo Page"},"/Blog-XSS_Todo/docs/folder/":{"data":{"":"Pages can be organized into folders."},"title":"Folder"},"/Blog-XSS_Todo/docs/folder/leaf/":{"data":{"":"This page is under a folder."},"title":"Leaf Page"}}